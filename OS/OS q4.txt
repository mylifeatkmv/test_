#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid;

    // Create a child process
    pid = fork();

    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) {
        // This code is executed by the child process
        printf("Child process (PID: %d) executing with different code:\n", getpid());
        printf("Child process: Hello from the child!\n");
        exit(EXIT_SUCCESS); // Child exits successfully
    } else {
        // This code is executed by the parent process
        printf("Parent process (PID: %d) executing with the same code:\n", getpid());
        printf("Parent process: Hello from the parent!\n");

        // Wait for the child to finish
        int status;
        wait(&status);

        if (WIFEXITED(status)) {
            printf("Parent process: Child exited with status %d\n", WEXITSTATUS(status));
        }
    }

    return 0;
}


1. Write a program (using fork () and/or exec () commands) where parent and child execute:
a) same program, same code.
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
int main()
{
pid_t pid , p;
p = fork();
pid = getpid();
if(p<0){
fprintf(stderr ,"FORK FAILED");
return 1;
}
printf("Process id of child process : %d \n" ,p);
printf("Process id of parent process : %d \n" ,pid);
return 0;
}



#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
int main()
{
int pid;
pid=fork();
if(pid<0){
printf("\nERROR");
exit(1);
}
else if(pid==0)
{
printf("HELLO , I AM CHILD PROCESS \n");
printf("My PID is %d \n" , getpid());
exit(0);
}
else
{
printf("HELLO , I AM PARENT PROCESS \n");
printf("My PID is %d \n", getpid());
}
return 0;
}

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main()
{
int pid;
pid=fork();
if(pid<0)
{
printf("\nERROR");
exit(1);
}
else if(pid==0)
{
printf("\nHELLO I AM CHILD PROCESS");
printf("\nMY pid is %d" , getpid());
exit(0);
}
else if(pid>0)
{
wait(NULL);
printf("\nHELLO I AM PARENT PROCESS");
printf("\nMy pid is %d \n" , getpid());
exit(1);
}
}
