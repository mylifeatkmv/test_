#include <iostream>
#include <thread>

int sum; // shared data among threads

void runner(int upper); // the thread function

int main(int argc, char *argv[]) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <integer value>\n";
        return -1;
    }

    if (std::atoi(argv[1]) < 0) {
        std::cerr << "The integer value must be >= 0\n";
        return -1;
    }

    std::thread tid(runner, std::atoi(argv[1]));

    // Wait for the thread to finish
    tid.join();

    std::cout << "SUM: " << sum << std::endl;

    return 0;
}

void runner(int upper) {
    sum = 0;
    for (int i = 1; i <= upper; i++) {
        sum += i;
    }
}
-----------------------------------------------------------------x------------------------------------------------------------------------------

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

int sum; // Shared data among threads

void *runner(void *param); // The thread function

int main(int argc, char *argv[]) {
    // Thread identifier
    pthread_t tid;
    // Set of thread attributes
    pthread_attr_t attr;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <integer value>\n", argv[0]);
        return -1;
    }

    int upper = atoi(argv[1]);

    if (upper < 0) {
        fprintf(stderr, "The integer value must be >= 0\n");
        return -1;
    }

    // Get default attributes
    pthread_attr_init(&attr);

    // Thread calculates the sum of numbers from 1 to argv[1] (an integer)
    pthread_create(&tid, &attr, runner, &upper);

    // Wait for the thread to exit
    pthread_join(tid, NULL);

    printf("SUM: %d\n", sum);

    return 0;
}

void *runner(void *param) {
    int i, upper = *((int *)param);
    sum = 0;

    for (i = 1; i <= upper; i++) {
        sum += i;
    }

    pthread_exit(0);
}

